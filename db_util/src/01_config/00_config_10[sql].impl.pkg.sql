create or replace package body app_config_sql
as
-- update config
    procedure update_config
    is
    begin
        g_table_name            := g_config.get('table_name').get_string;
    end;
-- get sql
    function get_create_table_sql return varchar2
    is
        l_sql           varchar2(4000);
    begin
        update_config();
        l_sql := '
            create table '|| g_table_name ||'(
                "config_id"     number generated by default on null as identity, 
                "config_code"   varchar2(64), 
                "config_user"   varchar2(64), 
                "config_name"   varchar2(64), 
                "config_value"  varchar2(4000)
                    constraint is_json_value check("config_value" is json), 
                "config_type"   varchar2(64), 
                "description"   varchar2(1024), 
                "status"        varchar2(16),
                "created_date"  date, 
                "updated_date"  date
            )';
        return l_sql;
    end;

    function get_insert_sql return varchar2
    is
        l_sql           varchar2(4000);
    begin
        update_config();
        l_sql   := '
        begin
            insert into '|| g_table_name ||'(
                config_id,
                config_code,
                config_user,
                config_name,
                config_value,
                config_type,
                description,
                status,
                created_date,
                updated_date)
            values(
                :config_id,
                :config_code,
                :config_user,
                :config_name,
                :config_value,
                :config_type,
                :description,
                :status,
                :created_date,
                :updated_date);
            commit;
        end;';
        return l_sql;
    end;
    function get_config_sql return varchar2
    is
        l_sql           varchar2(4000);
    begin
        update_config();
        l_sql := '
            select 
                config_id,
                config_code,
                config_user,
                config_name,
                config_value,
                config_type,
                description,
                status,
                created_date,
                updated_date
            from '||g_table_name||'
            where 1 = 1
                and (config_id  = :pi_config_id 
                    or (
                        config_code = :pi_config_code
                        and config_name = :pi_config_name
                        and status      = :pi_status
                    ))
                and rownum      = 1
            ';
        return l_sql;
    end;
begin
-- setup by default
    g_config    := new pljson();
    g_config.put('table_name', app_meta_data_util.get_table_name(pi_table_name => 'config'));
end app_config_sql;