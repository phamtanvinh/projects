/* ******************************************************************
** TYP_LOGGER_EXTEND
** ******************************************************************/

CREATE OR REPLACE TYPE TYP_LOGGER_EXTEND FORCE
UNDER TYP_LOGGER(
    STEP_ID             NUMBER,
    STEP_NAME           VARCHAR2(64),
    STEP_DESCRIPTION    VARCHAR2(1024),
-- LOGGING EXCEPTION
    MESSAGE             VARCHAR2(1024),
    LOG_SQLCODE         VARCHAR2(64),
    LOG_SQLERRM         VARCHAR2(1024),
    ERROR_BACKTRACE     VARCHAR2(4000),
-- STATIC METHODS
-- CONSTRUCTOR
    CONSTRUCTOR FUNCTION TYP_LOGGER_EXTEND RETURN SELF AS RESULT,
    CONSTRUCTOR FUNCTION TYP_LOGGER_EXTEND(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_APP_USER             VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL) 
    RETURN SELF AS RESULT,
-- INITIALIZE METHODS
    MEMBER FUNCTION FNC_GET_STEP_INFO RETURN VARCHAR2,
    MEMBER FUNCTION FNC_GET_EXCEPTION_INFO RETURN VARCHAR2,
    MEMBER FUNCTION FNC_GET_LOGGER_EXTEND_INFO RETURN VARCHAR2,
    OVERRIDING MEMBER FUNCTION FNC_GET_INFO RETURN VARCHAR2,

    OVERRIDING MEMBER PROCEDURE PRC_UPDATE_DURATION(PI_START_UNIX_TS NUMBER DEFAULT NULL, PI_UPDATED_UNIX_TS NUMBER DEFAULT NULL),
-- MANIPULATAION METHODS
    MEMBER PROCEDURE PRC_UPDATE_STEP(
        PI_STEP_NAME           VARCHAR2 DEFAULT NULL,
        PI_STEP_DESCRIPTION    VARCHAR2 DEFAULT NULL),
    MEMBER PROCEDURE PRC_UPDATE_LOGGER_EXTEND(
        PI_STEP_NAME           VARCHAR2 DEFAULT NULL,
        PI_STEP_DESCRIPTION    VARCHAR2 DEFAULT NULL),
    MEMBER PROCEDURE PRC_INIT_LOGGER_EXTEND(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_APP_USER             VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL) ,
    MEMBER PROCEDURE PRC_INIT_EXCEPTION(PI_MESSAGE VARCHAR2 DEFAULT NULL)
);
/

CREATE OR REPLACE TYPE BODY TYP_LOGGER_EXTEND
AS
-- STATIC METHODS
-- CONSTRUCTOR
    CONSTRUCTOR FUNCTION TYP_LOGGER_EXTEND 
    RETURN SELF AS RESULT
    IS
    BEGIN
        TYPE_NAME           := 'TYP_LOGGER_EXTEND';
        SELF.PRC_INIT_LOGGER_EXTEND();
        RETURN;
    END;

    CONSTRUCTOR FUNCTION TYP_LOGGER_EXTEND(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_APP_USER             VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL) 
    RETURN SELF AS RESULT
    IS
    BEGIN
        TYPE_NAME           := 'TYP_LOGGER_EXTEND';
        SELF.PRC_INIT_LOGGER_EXTEND(
            PI_TRANSACTION_CODE     => PI_TRANSACTION_CODE,
            PI_APP_USER             => PI_APP_USER,
            PI_UNIT_NAME            => PI_UNIT_NAME,
            PI_UNIT_TYPE            => PI_UNIT_TYPE,
            PI_DESCRIPTION          => PI_DESCRIPTION);
        RETURN;
    END;
-- INITIALIZE METHODS
    MEMBER FUNCTION FNC_GET_STEP_INFO 
    RETURN VARCHAR2
    IS
        L_INFO          VARCHAR2(4000);
        L_DICTIONARY    PKG_UTIL.DICTIONARY;
    BEGIN
        L_DICTIONARY('STEP_ID')             := STEP_ID;
        L_DICTIONARY('STEP_NAME')           := STEP_NAME;
        L_DICTIONARY('STEP_DESCRIPTION')    := STEP_DESCRIPTION;
        L_INFO          := PKG_UTIL.FNC_GET_INFO(L_DICTIONARY);
        RETURN L_INFO;
    END;

    MEMBER FUNCTION FNC_GET_EXCEPTION_INFO RETURN VARCHAR2
    IS
        L_INFO          VARCHAR2(4000);
        L_DICTIONARY    PKG_UTIL.DICTIONARY;
    BEGIN
        L_DICTIONARY('MESSAGE')             := MESSAGE;
        L_DICTIONARY('LOG_SQLCODE')         := LOG_SQLCODE;
        L_DICTIONARY('LOG_SQLERRM')         := LOG_SQLERRM;
        L_DICTIONARY('ERROR_BACKTRACE')     := ERROR_BACKTRACE;
        L_INFO          := PKG_UTIL.FNC_GET_INFO(L_DICTIONARY);
        RETURN L_INFO;
    END;

    MEMBER FUNCTION FNC_GET_LOGGER_EXTEND_INFO 
    RETURN VARCHAR2
    IS
        L_INFO          VARCHAR2(4000);
    BEGIN
        L_INFO          := L_INFO || SELF.FNC_GET_LOGGER_INFO();
        L_INFO          := L_INFO || SELF.FNC_GET_STEP_INFO();
        L_INFO          := L_INFO || SELF.FNC_GET_EXCEPTION_INFO();        
        RETURN L_INFO;
    END;

    OVERRIDING MEMBER FUNCTION FNC_GET_INFO RETURN VARCHAR2
    IS
        L_INFO          VARCHAR2(4000);
    BEGIN
        L_INFO          := PKG_UTIL.FNC_GET_STRING_FORMAT('TYPE_NAME', TYPE_NAME);
        L_INFO          := L_INFO || SELF.FNC_GET_LOGGER_EXTEND_INFO();
        RETURN L_INFO;
    END;

    OVERRIDING MEMBER PROCEDURE PRC_UPDATE_DURATION(PI_START_UNIX_TS NUMBER DEFAULT NULL, PI_UPDATED_UNIX_TS NUMBER DEFAULT NULL)
    IS
    BEGIN
        DURATION := PKG_UTIL.FNC_GET_UNIX_TS(CURRENT_TIMESTAMP) - UPDATED_UNIX_TS;
    END;
-- MANIPULATAION METHODS
    MEMBER PROCEDURE PRC_UPDATE_STEP(
        PI_STEP_NAME           VARCHAR2 DEFAULT NULL,
        PI_STEP_DESCRIPTION    VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        SELF.PRC_UPDATE_LOGGER();
        STEP_ID                 := NVL(STEP_ID + 1, 0);
        STEP_NAME               := PI_STEP_NAME;
        STEP_DESCRIPTION        := PI_STEP_DESCRIPTION;
    END;      

    MEMBER PROCEDURE PRC_INIT_LOGGER_EXTEND(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_APP_USER             VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL) 
    IS
    BEGIN
        SELF.PRC_UPDATE_STEP(PI_STEP_NAME => '000', PI_STEP_DESCRIPTION => 'Initialize logging process ...');
        SELF.PRC_INIT_LOGGER(
            PI_TRANSACTION_CODE     => PI_TRANSACTION_CODE,
            PI_APP_USER             => PI_APP_USER,
            PI_UNIT_NAME            => PI_UNIT_NAME,
            PI_UNIT_TYPE            => PI_UNIT_TYPE,
            PI_DESCRIPTION          => PI_DESCRIPTION);
    END;

    MEMBER PROCEDURE PRC_UPDATE_LOGGER_EXTEND(
        PI_STEP_NAME           VARCHAR2 DEFAULT NULL,
        PI_STEP_DESCRIPTION    VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        SELF.PRC_UPDATE_STEP(
            PI_STEP_NAME           => PI_STEP_NAME,
            PI_STEP_DESCRIPTION    => PI_STEP_DESCRIPTION);
    END;

    MEMBER PROCEDURE PRC_INIT_EXCEPTION(PI_MESSAGE VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        SELF.PRC_UPDATE_LOGGER();
        MESSAGE             := PI_MESSAGE;
        LOG_SQLCODE         := SQLCODE;
        LOG_SQLERRM         := SQLERRM(SQLCODE);
        ERROR_BACKTRACE     := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    END;
END;