
CREATE OR REPLACE PACKAGE MKT_UTIL AS
    G_PACKAGE_INFO          VARCHAR2(4000) := '
** ******************************************************************
** DESCIPTION
** ******************************************************************
** THIS PACKAGE WILL USE TO:
** - SAVE STATE OF USER ACTION
** - TRACK LOG
** - TRACK RUNNING TIME
** - SHOW INFO
** ******************************************************************';

    G_TEMPLATE_LOGGING      VARCHAR2(4000) := '
DECLARE
    L_TRANSACTION_CODE        VARCHAR2(512) := APEX_APPLICATION.G_FLOW_ID || APEX_APPLICATION.G_FLOW_STEP_ID || APEX_APPLICATION.G_FLOW_OWNER;
BEGIN
    MKT_UTIL.PRC_INIT_LOGGING_INSTANCE(        
        PI_APP_USER             =>V(''APP_USER''),
        PI_UNIT_NAME            =>$$PLSQL_UNIT,
        PI_UNIT_TYPE            =>''[PASS YOUR TYPE]'',
        PI_TRANSACTION_CODE     =>L_TRANSACTION_CODE);
    MKT_UTIL.G_MKT_LOGGING_INSTANCE.PRC_PRINT_INFO();
    RAISE NO_DATA_FOUND;
EXCEPTION
    WHEN OTHERS 
        THEN
            MKT_UTIL.PRC_INIT_ERROR(
                PI_MESSAGE          =>''[PASS YOUR MESSAGE]'',
                PI_LOG_PLSQL_LINE   =>''[PASS YOUR PLSQL LINE]'');
            MKT_UTIL.G_MKT_LOGGING_INSTANCE.LOGGER_EXCEPTION.PRC_PRINT_INFO();
END;';

    G_PREFIX                VARCHAR2(128) := 'ODS';
    G_LOGGING_RUNNING_TIME  VARCHAR2(128) := 'LOGGING_RUNNING_TIME';
    G_LOGGING_EXCEPTION     VARCHAR2(128) := 'LOGGING_EXCEPTION';

    G_TABLE_RUNNING_TIME    VARCHAR2(128);
    G_TABLE_EXCEPTION       VARCHAR2(128);
    G_SQL_LOGGING_RUNNING_TIME  VARCHAR2(4000);
    G_SQL_LOGGING_EXCEPTION     VARCHAR2(4000);

    G_MKT_LOGGING_INSTANCE      MKT_LOGGING;


    FUNCTION FNC_IS_EXIST_TABLE(PI_TABLE_NAME VARCHAR2) RETURN BOOLEAN;
    PROCEDURE PRC_PRINT_PACKAGE_INFO;
    PROCEDURE PRC_PRINT_TEMPLATE_LOGGING;

-- INITIALIZE LOGGING TABLES
    PROCEDURE PRC_PRINT_CONFIG;
    PROCEDURE PRC_CREATE_SQL_LOGGING_TABLES;
    PROCEDURE PRC_DROP_LOGGING_TABLES;
    PROCEDURE PRC_CREATE_LOGGING_TABLES(PI_ACTION VARCHAR2 DEFAULT 'PREVIEW');
    PROCEDURE PRC_INIT_LOGGING_TABLE_NAME;
    PROCEDURE PRC_INIT_LOGGING_TABLES(PI_IS_TRUE BOOLEAN DEFAULT FALSE);

-- INITIALIZE LOGGING INSTANCE
    PROCEDURE PRC_INIT_LOGGING_INSTANCE(
        PI_APP_USER             VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL);
-- FEATURE LOGGING EXCEPTION
    PROCEDURE PRC_INIT_ERROR(
        PI_MESSAGE          VARCHAR2 DEFAULT NULL,
        PI_LOG_PLSQL_LINE   VARCHAR2 DEFAULT NULL);

-- FEATURE LOGGING RUNNING TIME
    PROCEDURE PRC_UPDATE_STEP(
        PI_STEP_NAME        VARCHAR2 DEFAULT '000',
        PI_DESCRIPTION      VARCHAR2 DEFAULT NULL);

-- FEATURE MAPPING
    PROCEDURE PRC_INS_LOGGING_RUNNING_TIME(
        PI_STEP_NAME        VARCHAR2 DEFAULT '000',
        PI_DESCRIPTION      VARCHAR2 DEFAULT NULL,
        PI_ACTION           VARCHAR2 DEFAULT 'UPDATE');
    PROCEDURE PRC_INS_LOGGING_EXCEPTION;

END MKT_UTIL;
/

CREATE OR REPLACE PACKAGE BODY MKT_UTIL 
AS
-- INITIALIZE PACKAGE
    PROCEDURE PRC_PRINT_CONFIG
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(''
            ||'G_PREFIX                     :'||MKT_UTIL.G_PREFIX                   ||CHR(10)
            ||'G_LOGGING_RUNNING_TIME       :'||MKT_UTIL.G_LOGGING_RUNNING_TIME     ||CHR(10)
            ||'G_LOGGING_EXCEPTION          :'||MKT_UTIL.G_LOGGING_EXCEPTION        ||CHR(10)
            ||'G_TABLE_RUNNING_TIME         :'||MKT_UTIL.G_TABLE_RUNNING_TIME       ||CHR(10)
            ||'G_TABLE_EXCEPTION            :'||MKT_UTIL.G_TABLE_EXCEPTION          ||CHR(10)
            ||'G_SQL_LOGGING_RUNNING_TIME   :'||MKT_UTIL.G_SQL_LOGGING_RUNNING_TIME ||CHR(10)
            ||'G_SQL_LOGGING_EXCEPTION      :'||MKT_UTIL.G_SQL_LOGGING_EXCEPTION);
    END;

 -- INITIALIZE LOGGING

    PROCEDURE PRC_INIT_LOGGING_TABLE_NAME
    IS
    BEGIN
        G_TABLE_RUNNING_TIME        := MKT_UTIL.G_PREFIX||'_'||MKT_UTIL.G_LOGGING_RUNNING_TIME;
        G_TABLE_EXCEPTION           := MKT_UTIL.G_PREFIX||'_'||MKT_UTIL.G_LOGGING_EXCEPTION;
    END;

    PROCEDURE PRC_PRINT_PACKAGE_INFO
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(MKT_UTIL.G_PACKAGE_INFO);
    END;

    FUNCTION FNC_IS_EXIST_TABLE(PI_TABLE_NAME VARCHAR2) 
    RETURN BOOLEAN
    IS
        L_COUNTER       NUMBER  := 0;
        L_IS_TRUE       BOOLEAN := FALSE;
    BEGIN
        SELECT COUNT(*) INTO L_COUNTER FROM TAB WHERE TNAME = PI_TABLE_NAME;
        IF L_COUNTER > 0 THEN
            L_IS_TRUE := TRUE;
        ELSE
            L_IS_TRUE := FALSE;
        END IF;
        RETURN L_IS_TRUE;
    END;
  
    PROCEDURE PRC_CREATE_SQL_LOGGING_TABLES
    IS
    BEGIN
        MKT_UTIL.G_SQL_LOGGING_RUNNING_TIME  :='
            CREATE TABLE '||G_TABLE_RUNNING_TIME||'(
                APP_USER            VARCHAR2(64),
                TRANSACTION_ID      VARCHAR2(256),
                TRANSACTION_CODE    VARCHAR2(256),
                UNIT_NAME           VARCHAR2(256),
                UNIT_TYPE           VARCHAR2(64),
                DESCRIPTION         VARCHAR2(1024), 
                PREVIOUS_STEP_NAME  VARCHAR2(256),
                STEP_NAME           VARCHAR2(256),
                CREATED_NUMBER      NUMBER,
                PREVIOUS_NUMBER     NUMBER,
                UPDATED_NUMBER      NUMBER,
                DURATION            NUMBER)';

        MKT_UTIL.G_SQL_LOGGING_EXCEPTION     := '
            CREATE TABLE '||G_TABLE_EXCEPTION||'(
                APP_USER            VARCHAR2(64),
                TRANSACTION_ID      VARCHAR2(256),
                TRANSACTION_CODE    VARCHAR2(256),
                UNIT_NAME           VARCHAR2(256),
                UNIT_TYPE           VARCHAR2(64),
                DESCRIPTION         VARCHAR2(1024), 
                MESSAGE             VARCHAR2(1024),
                LOG_SQLCODE         VARCHAR2(64),
                LOG_SQLERRM         VARCHAR2(1024),
                LOG_PLSQL_LINE      VARCHAR2(32),
                ERROR_BACKTRACE     VARCHAR2(1024),
                CREATED_NUMBER      NUMBER,
                PREVIOUS_NUMBER     NUMBER,
                UPDATED_NUMBER      NUMBER,
                DURATION            NUMBER)';
    END;

    PROCEDURE PRC_DROP_LOGGING_TABLES
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Droping logging tables if exist ...');
        IF MKT_UTIL.FNC_IS_EXIST_TABLE(G_TABLE_RUNNING_TIME)
        THEN
            EXECUTE IMMEDIATE 'DROP TABLE '||G_TABLE_RUNNING_TIME||' PURGE';
        END IF;
        IF MKT_UTIL.FNC_IS_EXIST_TABLE(G_TABLE_EXCEPTION)
        THEN
            EXECUTE IMMEDIATE 'DROP TABLE '||G_TABLE_EXCEPTION||' PURGE';
        END IF;
        DBMS_OUTPUT.PUT_LINE('Drop done ...');
    END;

    PROCEDURE PRC_CREATE_LOGGING_TABLES(PI_ACTION VARCHAR2 DEFAULT 'PREVIEW')
    IS 
    BEGIN
        MKT_UTIL.PRC_CREATE_SQL_LOGGING_TABLES();
        IF PI_ACTION = 'PREVIEW'
        THEN
            DBMS_OUTPUT.PUT_LINE(MKT_UTIL.G_SQL_LOGGING_RUNNING_TIME);
            DBMS_OUTPUT.PUT_LINE(MKT_UTIL.G_SQL_LOGGING_EXCEPTION);
        ELSIF PI_ACTION = 'CREATE'
        THEN
            DBMS_OUTPUT.PUT_LINE('Creating logging tables ...');
            EXECUTE IMMEDIATE MKT_UTIL.G_SQL_LOGGING_RUNNING_TIME;
            EXECUTE IMMEDIATE MKT_UTIL.G_SQL_LOGGING_EXCEPTION;
            DBMS_OUTPUT.PUT_LINE('Create done ...');
        ELSE
            NULL;
        END IF;
    END;

    PROCEDURE PRC_INIT_LOGGING_TABLES(PI_IS_TRUE BOOLEAN DEFAULT FALSE)
    IS
    BEGIN
        IF PI_IS_TRUE
        THEN
            DBMS_OUTPUT.PUT_LINE('Prepairing for logging tables ...');
            MKT_UTIL.PRC_DROP_LOGGING_TABLES();
            MKT_UTIL.PRC_CREATE_LOGGING_TABLES(PI_ACTION => 'CREATE');
            DBMS_OUTPUT.PUT_LINE('Initialize done.');
            DBMS_OUTPUT.PUT_LINE('Using below SQL to check:'    ||CHR(10)
                    ||'SELECT * FROM '||G_TABLE_RUNNING_TIME    ||';'||CHR(10)
                    ||'SELECT * FROM '||G_TABLE_EXCEPTION       ||';');
        ELSE
            DBMS_OUTPUT.PUT_LINE('WARNING: IF YOU WANT TO INITIALIZE LOGGING TABLES, ALL LOGGING TABLES WILL BE CLEAR.PLEASE PASS PARAMETER AS TRUE');
        END IF;
    END;
    PROCEDURE PRC_INIT_LOGGING_INSTANCE(
        PI_APP_USER             VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        MKT_UTIL.G_MKT_LOGGING_INSTANCE := NEW MKT_LOGGING( 
            PI_APP_USER             =>PI_APP_USER,
            PI_UNIT_NAME            =>PI_UNIT_NAME,
            PI_UNIT_TYPE            =>PI_UNIT_TYPE,
            PI_TRANSACTION_CODE     =>PI_TRANSACTION_CODE);
    END;

    PROCEDURE PRC_INIT_ERROR(
        PI_MESSAGE          VARCHAR2 DEFAULT NULL,
        PI_LOG_PLSQL_LINE   VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        G_MKT_LOGGING_INSTANCE.LOGGER_EXCEPTION.PRC_INIT_ERROR(
            PI_MESSAGE          =>PI_MESSAGE,
            PI_LOG_PLSQL_LINE   =>PI_LOG_PLSQL_LINE);
    END;

    PROCEDURE PRC_PRINT_TEMPLATE_LOGGING
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(MKT_UTIL.G_TEMPLATE_LOGGING);
    END;

    PROCEDURE PRC_UPDATE_STEP(
        PI_STEP_NAME        VARCHAR2 DEFAULT '000',
        PI_DESCRIPTION      VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('PRC_UPDATE_STEP');
    END; 

    PROCEDURE PRC_INS_LOGGING_RUNNING_TIME(
        PI_STEP_NAME        VARCHAR2 DEFAULT '000',
        PI_DESCRIPTION      VARCHAR2 DEFAULT NULL,
        PI_ACTION           VARCHAR2 DEFAULT 'UPDATE')
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('PRC_INS_LOGGING_RUNNING_TIME');
    END;

    PROCEDURE PRC_INS_LOGGING_EXCEPTION
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('PRC_INS_LOGGING_EXCEPTION');
    END;

BEGIN      
    MKT_UTIL.PRC_INIT_LOGGING_TABLE_NAME();
END MKT_UTIL;






