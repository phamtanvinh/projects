/* ******************************************************************
** PKG_UTIL
** ******************************************************************/
CREATE OR REPLACE PACKAGE PKG_UTIL
AS
-- GLOBAL ATTRIBUTES
    G_TYPE_INFO             VARCHAR2(4000);
    G_RPAD_SIZE             NUMBER := 20;
-- COLLECTION DATA TYPES
    TYPE TUPLE IS TABLE OF VARCHAR2(4000);
    TYPE DICTIONARY IS TABLE OF VARCHAR2(4000) INDEX BY VARCHAR2(64);

-- FEATURE: GET AND INFO
    FUNCTION FNC_GET_INFO(PI_DICTIONARY DICTIONARY) RETURN VARCHAR2;
    PROCEDURE PRC_PRINT_INFO(PI_DICTIONARY DICTIONARY);
    PROCEDURE PRC_PRINT_TYPE_INFO;

-- FEATURE: MANIPULATE TIMESTAMP
    FUNCTION FNC_GET_UNIX_TS(PI_TIMESTAMP TIMESTAMP) RETURN NUMBER;
    FUNCTION FNC_GET_DNUM(PI_TIMESTAMP TIMESTAMP) RETURN NUMBER;

-- FEATURE: MANIPULATE TABLE
    FUNCTION FNC_IS_EXIST_TABLE(PI_TABLE_NAME VARCHAR2) RETURN BOOLEAN;
    PROCEDURE PRC_DROP_TABLE(PI_TABLE_NAME VARCHAR2, PI_IS_FORCED BOOLEAN DEFAULT FALSE);

-- FEATURE: MANIPULATE STRING
    FUNCTION FNC_GET_STRING_FORMAT(PI_KEY VARCHAR2, PI_VALUE VARCHAR2) RETURN VARCHAR2;

-- FEATURE: MANIPULATE DICTIONARY
    FUNCTION FNC_GET_DICT_INFO(PI_DICTIONARY DICTIONARY) RETURN VARCHAR2; 
END PKG_UTIL;
/

CREATE OR REPLACE PACKAGE BODY PKG_UTIL
AS
-- FEATURE: GET AND INFO
    FUNCTION FNC_GET_INFO(PI_DICTIONARY DICTIONARY) 
    RETURN VARCHAR2 
    IS
        L_INFO      VARCHAR2(4000);
    BEGIN
        L_INFO := PKG_UTIL.FNC_GET_DICT_INFO(PI_DICTIONARY);
        RETURN L_INFO;
    END;

    PROCEDURE PRC_PRINT_INFO(PI_DICTIONARY DICTIONARY)
    IS
        L_INFO      VARCHAR2(4000);
    BEGIN
        L_INFO := PKG_UTIL.FNC_GET_INFO(PI_DICTIONARY);
        DBMS_OUTPUT.PUT_LINE(L_INFO);
    END;

    PROCEDURE PRC_PRINT_TYPE_INFO IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(G_TYPE_INFO);
    END;

-- FEATURE: MANIPULATE TIMESTAMP 
    FUNCTION FNC_GET_UNIX_TS(PI_TIMESTAMP TIMESTAMP) RETURN NUMBER IS
    BEGIN
        RETURN ROUND((CAST(PI_TIMESTAMP AS DATE) - DATE '1970-01-01')*24*60*60);
    END;

    FUNCTION FNC_GET_DNUM(PI_TIMESTAMP TIMESTAMP) RETURN NUMBER IS
    BEGIN
        RETURN TO_NUMBER(TO_CHAR(PI_TIMESTAMP, 'J'));
    END;

-- FEATURE: MANIPULATE TABLE
    FUNCTION FNC_IS_EXIST_TABLE(PI_TABLE_NAME VARCHAR2) 
    RETURN BOOLEAN
    IS
        L_IS_TRUE   BOOLEAN := FALSE;
        L_COUNTER   NUMBER  := 0;
    BEGIN
        SELECT COUNT(*) INTO L_COUNTER FROM TAB WHERE TNAME = PI_TABLE_NAME;
        IF L_COUNTER > 0
        THEN
            L_IS_TRUE := TRUE;
        END IF;    
        RETURN L_IS_TRUE;
    END;

    PROCEDURE PRC_DROP_TABLE(PI_TABLE_NAME VARCHAR2, PI_IS_FORCED BOOLEAN DEFAULT FALSE)
    IS
    BEGIN
        IF PKG_UTIL.FNC_IS_EXIST_TABLE(PI_TABLE_NAME) AND PI_IS_FORCED
        THEN
            EXECUTE IMMEDIATE 'DROP TABLE '|| PI_TABLE_NAME;
        END IF;
    END;

-- FEATURE: MANIPULATE STRING
    FUNCTION FNC_GET_STRING_FORMAT(PI_KEY VARCHAR2, PI_VALUE VARCHAR2) RETURN VARCHAR2
    IS
    BEGIN
        RETURN RPAD(PI_KEY, G_RPAD_SIZE, CHR(32))|| ':' || PI_VALUE || CHR(10);
    END;

-- FEATURE: MANIPULATE DICTIONARY
    FUNCTION FNC_GET_DICT_INFO(PI_DICTIONARY DICTIONARY) 
    RETURN VARCHAR2 
    IS
        L_KEY       VARCHAR2(64) := PI_DICTIONARY.FIRST;
        L_VALUE     VARCHAR2(4000);
        L_INFO      VARCHAR2(4000);
    BEGIN
        WHILE L_KEY IS NOT NULL
        LOOP
            L_VALUE := PI_DICTIONARY(L_KEY);
            L_INFO  := L_INFO || FNC_GET_STRING_FORMAT(L_KEY, L_VALUE);
            L_KEY   := PI_DICTIONARY.NEXT(L_KEY);
        END LOOP;
        RETURN L_INFO;
    END;
END PKG_UTIL;
/
