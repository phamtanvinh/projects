/* ******************************************************************
** TYP_LOGGER_EXCEPTION
** ******************************************************************/
CREATE OR REPLACE TYPE TYP_LOGGER_EXCEPTION FORCE
UNDER TYP_LOGGER(
    MESSAGE             VARCHAR2(4000),
    LOG_SQLCODE         VARCHAR2(4000),
    LOG_SQLERRM         VARCHAR2(4000),
    ERROR_BACKTRACE     VARCHAR2(4000),
-- STATIC METHODS
-- CONSTRUCTOR
    CONSTRUCTOR FUNCTION TYP_LOGGER_EXCEPTION RETURN SELF AS RESULT,
    CONSTRUCTOR FUNCTION TYP_LOGGER_EXCEPTION(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL) RETURN SELF AS RESULT,
-- INITIALIZE METHODS
    MEMBER FUNCTION FNC_GET_EXCEPTION_INFO RETURN VARCHAR2,
    MEMBER FUNCTION FNC_GET_LOGGER_EXCEPTION_INFO RETURN VARCHAR2,
    OVERRIDING MEMBER FUNCTION FNC_GET_INFO RETURN VARCHAR2,
-- MANIPULATAION METHODS
    MEMBER PROCEDURE PRC_GET_EXCEPTION(PI_MESSAGE VARCHAR2 DEFAULT NULL),
    MEMBER PROCEDURE PRC_INIT_LOGGER_EXCEPTION(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL)
);
/

CREATE OR REPLACE TYPE BODY TYP_LOGGER_EXCEPTION
AS
-- STATIC METHODS
-- CONSTRUCTOR
    CONSTRUCTOR FUNCTION TYP_LOGGER_EXCEPTION RETURN SELF AS RESULT
    IS
    BEGIN
        TYPE_NAME           := 'TYP_LOGGER_EXCEPTION';
        SELF.PRC_INIT_LOGGER_EXCEPTION();
        RETURN;
    END;
    CONSTRUCTOR FUNCTION TYP_LOGGER_EXCEPTION(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL) 
    RETURN SELF AS RESULT
    IS
    BEGIN
        TYPE_NAME           := 'TYP_LOGGER_EXCEPTION';
        SELF.PRC_INIT_LOGGER_EXCEPTION(
            PI_TRANSACTION_CODE     => PI_TRANSACTION_CODE,
            PI_UNIT_NAME            => PI_UNIT_NAME,
            PI_UNIT_TYPE            => PI_UNIT_TYPE,
            PI_DESCRIPTION          => PI_DESCRIPTION);
        RETURN;
    END;
-- INITIALIZE METHODS
    MEMBER FUNCTION FNC_GET_EXCEPTION_INFO RETURN VARCHAR2
    IS
        L_INFO          VARCHAR2(4000);
        L_DICTIONARY    PKG_UTIL.DICTIONARY;
    BEGIN
        L_DICTIONARY('MESSAGE')             := MESSAGE;
        L_DICTIONARY('LOG_SQLCODE')         := LOG_SQLCODE;
        L_DICTIONARY('LOG_SQLERRM')         := LOG_SQLERRM;
        L_INFO          := PKG_UTIL.FNC_GET_INFO(L_DICTIONARY);
        RETURN L_INFO;
    END;

    MEMBER FUNCTION FNC_GET_LOGGER_EXCEPTION_INFO RETURN VARCHAR2
    IS
        L_INFO          VARCHAR2(4000);
        L_DICTIONARY    PKG_UTIL.DICTIONARY;
    BEGIN
        L_INFO          := L_INFO || SELF.FNC_GET_LOGGER_INFO();
        L_INFO          := L_INFO || SELF.FNC_GET_EXCEPTION_INFO();
        RETURN L_INFO;
    END;

    OVERRIDING MEMBER FUNCTION FNC_GET_INFO RETURN VARCHAR2
    IS
        L_INFO          VARCHAR2(4000);
    BEGIN
        L_INFO          := PKG_UTIL.FNC_GET_STRING_FORMAT('TYPE_NAME', TYPE_NAME);
        L_INFO          := L_INFO || SELF.FNC_GET_LOGGER_EXCEPTION_INFO();
        RETURN L_INFO;
    END;
-- MANIPULATAION METHODS
    MEMBER PROCEDURE PRC_GET_EXCEPTION(PI_MESSAGE VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        SELF.PRC_UPDATE_LOGGER();
        MESSAGE             := PI_MESSAGE;
        LOG_SQLCODE         := SQLCODE;
        LOG_SQLERRM         := SQLERRM(SQLCODE);
        ERROR_BACKTRACE     := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    END;

    MEMBER PROCEDURE PRC_INIT_LOGGER_EXCEPTION(
        PI_TRANSACTION_CODE     VARCHAR2 DEFAULT NULL,
        PI_UNIT_NAME            VARCHAR2 DEFAULT NULL,
        PI_UNIT_TYPE            VARCHAR2 DEFAULT NULL,
        PI_DESCRIPTION          VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        SELF.PRC_INIT_LOGGER(
            PI_TRANSACTION_CODE     => PI_TRANSACTION_CODE,
            PI_UNIT_NAME            => PI_UNIT_NAME,
            PI_UNIT_TYPE            => PI_UNIT_TYPE,
            PI_DESCRIPTION          => PI_DESCRIPTION);
    END;
END;
