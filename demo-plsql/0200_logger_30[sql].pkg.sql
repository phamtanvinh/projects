/* ******************************************************************
** PKG_LOGGER_SQL
** ******************************************************************/
CREATE OR REPLACE PACKAGE PKG_LOGGER_SQL
AS
    G_LOGGER_CONFIG         PKG_UTIL.DICTIONARY;
    G_LOGGER_SQL            PKG_UTIL.DICTIONARY;
    FUNCTION FNC_CREATE_DDL(PI_SQL_KEY IN VARCHAR2) RETURN VARCHAR2;
    PROCEDURE PRC_UPDATE_CONFIG;
    PROCEDURE PRC_INIT(PI_IS_FORCE BOOLEAN DEFAULT FALSE);

END PKG_LOGGER_SQL;
/

CREATE OR REPLACE PACKAGE BODY PKG_LOGGER_SQL
AS
    FUNCTION FNC_CREATE_DDL(PI_SQL_KEY IN VARCHAR2) RETURN VARCHAR2
    IS
        L_SQL           VARCHAR2(4000);
        L_KEY           VARCHAR2(64);   
    BEGIN
        PKG_LOGGER_SQL.PRC_UPDATE_CONFIG();
        L_KEY := G_LOGGER_CONFIG.FIRST;
        L_SQL := G_LOGGER_SQL(PI_SQL_KEY);
        WHILE L_KEY IS NOT NULL
        LOOP
            L_SQL := REPLACE(L_SQL, L_KEY, G_LOGGER_CONFIG(L_KEY));
            L_KEY := G_LOGGER_CONFIG.NEXT(L_KEY);
        END LOOP;
        RETURN L_SQL;
    END;

    PROCEDURE PRC_UPDATE_CONFIG
    IS
    BEGIN
        G_LOGGER_CONFIG('[PREFIX_TABLE]')           := PKG_META_DATA.G_PREFIX('TABLE');
        G_LOGGER_CONFIG('[LOGGER_RUNNING_NAME]')    := G_LOGGER_CONFIG('[PREFIX_TABLE]')||'_LOGGER_RUNNING';
        G_LOGGER_CONFIG('[LOGGER_EXCEPTION_NAME]')  := G_LOGGER_CONFIG('[PREFIX_TABLE]')||'_LOGGER_EXCEPTION';
    END;

    PROCEDURE PRC_INIT(PI_IS_FORCE BOOLEAN DEFAULT FALSE)
    IS 
        L_SQL       VARCHAR2(4000) ;
    BEGIN
        PRC_UPDATE_CONFIG();
        IF PI_IS_FORCE
        THEN
            DBMS_OUTPUT.PUT_LINE('Drop table '|| G_LOGGER_CONFIG('[LOGGER_RUNNING_NAME]'));
            PKG_UTIL.PRC_DROP_TABLE(G_LOGGER_CONFIG('[LOGGER_RUNNING_NAME]'), TRUE);
            DBMS_OUTPUT.PUT_LINE('Drop table '|| G_LOGGER_CONFIG('[LOGGER_EXCEPTION_NAME]'));
            PKG_UTIL.PRC_DROP_TABLE(G_LOGGER_CONFIG('[LOGGER_EXCEPTION_NAME]'), TRUE);
            DBMS_OUTPUT.PUT_LINE('Initialize all logger tables ...');
            L_SQL       := PKG_LOGGER_SQL.FNC_CREATE_DDL('LOGGER_RUNNING_SQL_CREATE_TABLE');
            EXECUTE IMMEDIATE L_SQL;        
            L_SQL       := PKG_LOGGER_SQL.FNC_CREATE_DDL('LOGGER_EXCEPTION_SQL_CREATE_TABLE');
            EXECUTE IMMEDIATE L_SQL;
            DBMS_OUTPUT.PUT_LINE('Finish. Successful.');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Warning: this action will be clear all logger tables and dependences, please pass "TRUE" if you want to do this action');
        END IF;
    END; 


BEGIN
    PKG_LOGGER_SQL.PRC_UPDATE_CONFIG();
    
    G_LOGGER_SQL('LOGGER_RUNNING_SQL_CREATE_TABLE')  := '
CREATE TABLE "[LOGGER_RUNNING_NAME]" (
    "TRANSACTION_ID" VARCHAR2(64 BYTE), 
    "TRANSACTION_CODE" VARCHAR2(64 BYTE), 
    "APP_USER" VARCHAR2(64 BYTE), 
    "UNIT_NAME" VARCHAR2(64 BYTE), 
    "UNIT_TYPE" VARCHAR2(64 BYTE), 
    "DESCRIPTION" VARCHAR2(1024 BYTE), 
    "START_TS" TIMESTAMP (6), 
    "START_UNIX_TS" NUMBER, 
    "START_DATE" DATE, 
    "START_DNUM" NUMBER, 
    "UPDATED_TS" TIMESTAMP (6), 
    "UPDATED_UNIX_TS" NUMBER, 
    "UPDATED_DATE" DATE, 
    "UPDATED_DNUM" NUMBER, 
    "DURATION" NUMBER, 
    "STEP_ID" NUMBER, 
    "STEP_NAME" VARCHAR2(64 BYTE), 
    "STEP_DESCRIPTION" VARCHAR2(1024 BYTE)
)';

    G_LOGGER_SQL('LOGGER_EXCEPTION_SQL_CREATE_TABLE')    := '
CREATE TABLE "[LOGGER_EXCEPTION_NAME]" (
    "TRANSACTION_ID" VARCHAR2(64 BYTE), 
    "TRANSACTION_CODE" VARCHAR2(64 BYTE), 
    "APP_USER" VARCHAR2(64 BYTE), 
    "UNIT_NAME" VARCHAR2(64 BYTE), 
    "UNIT_TYPE" VARCHAR2(64 BYTE), 
    "DESCRIPTION" VARCHAR2(1024 BYTE), 
    "START_TS" TIMESTAMP (6), 
    "START_UNIX_TS" NUMBER, 
    "START_DATE" DATE, 
    "START_DNUM" NUMBER, 
    "UPDATED_TS" TIMESTAMP (6), 
    "UPDATED_UNIX_TS" NUMBER, 
    "UPDATED_DATE" DATE, 
    "UPDATED_DNUM" NUMBER, 
    "DURATION" NUMBER, 
    "STEP_ID" NUMBER, 
    "STEP_NAME" VARCHAR2(64 BYTE), 
    "STEP_DESCRIPTION" VARCHAR2(1024 BYTE),   
    "MESSAGE" VARCHAR2(1024 BYTE), 
    "LOG_SQLCODE" VARCHAR2(64 BYTE), 
    "LOG_SQLERRM" VARCHAR2(1024 BYTE), 
    "ERROR_BACKTRACE" VARCHAR2(4000 BYTE)
)';
END PKG_LOGGER_SQL;
/