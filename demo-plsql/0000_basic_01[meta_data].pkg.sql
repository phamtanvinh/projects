/* ******************************************************************
** PKG_META_DATA
** ******************************************************************/
CREATE OR REPLACE PACKAGE PKG_META_DATA
AS
-- GENERAL META DATA
    G_PREFIX                    PKG_UTIL.DICTIONARY;
-- GLOBAL ATTRIBUTES
    G_INFO_DICTIONARY           PKG_UTIL.DICTIONARY;
    G_REQUIREMENT_DICTIONARY    PKG_UTIL.DICTIONARY;
    G_CONFIG                    PKG_UTIL.DICTIONARY;

    FUNCTION FNC_GET_TYPE_INFO(PI_KEY VARCHAR2) RETURN VARCHAR2;
    FUNCTION FNC_GET_TYPE_REQUIREMENT(PI_KEY VARCHAR2) RETURN VARCHAR2;
    PROCEDURE PRC_PRINT_TYPE_INFO(PI_KEY VARCHAR2 DEFAULT NULL);
    PROCEDURE PRC_PRINT_TYPE_REQUIREMENT(PI_KEY VARCHAR2 DEFAULT NULL);
END PKG_META_DATA;
/

CREATE OR REPLACE PACKAGE BODY PKG_META_DATA
AS
    FUNCTION FNC_GET_TYPE_INFO(PI_KEY VARCHAR2) 
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN G_INFO_DICTIONARY(PI_KEY);
    END;

    FUNCTION FNC_GET_TYPE_REQUIREMENT(PI_KEY VARCHAR2) 
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN G_REQUIREMENT_DICTIONARY(PI_KEY);
    END;

    PROCEDURE PRC_PRINT_TYPE_INFO(PI_KEY VARCHAR2 DEFAULT NULL)
    IS
        L_INFO      VARCHAR2(4000);
    BEGIN
        L_INFO      := PKG_META_DATA.FNC_GET_TYPE_INFO(PI_KEY);
        DBMS_OUTPUT.PUT_LINE(L_INFO);
    END;

    PROCEDURE PRC_PRINT_TYPE_REQUIREMENT(PI_KEY VARCHAR2 DEFAULT NULL)
    IS
        L_REQUIREMENT       VARCHAR2(4000);
    BEGIN
        L_REQUIREMENT       := PKG_META_DATA.FNC_GET_TYPE_REQUIREMENT(PI_KEY);
        DBMS_OUTPUT.PUT_LINE(L_REQUIREMENT);
    END;

BEGIN
-- GENERAL META DATA
    G_PREFIX('__NAME__')                                := 'G_PREFIX';
    G_PREFIX('TYPE')                                    := 'TYP';
    G_PREFIX('TABLE')                                   := 'TAB';
    G_PREFIX('PROCEDURE')                               := 'PRC';
    G_PREFIX('FUNCTION')                                := 'FNC';

-- INFO
    G_INFO_DICTIONARY('__NAME__')                       := 'G_INFO_DICTIONARY';
    G_INFO_DICTIONARY('TYP_CONFIG')                     := 'THIS IS INFO OF TYP_CONFIG';
-- REQUIREMENT
    G_REQUIREMENT_DICTIONARY('__NAME__')                := 'G_REQUIREMENT_DICTIONARY';
    G_REQUIREMENT_DICTIONARY('TYP_BASE')                := 'THIS IS REQUIREMENT OF TYP_BASE';
-- TYP_CONFIG
    G_CONFIG('__NAME__')                                := 'G_CONFIG';
    G_CONFIG('TAB_CONFIG')                              := 'TAB_CONFIG';

END PKG_META_DATA;
/

